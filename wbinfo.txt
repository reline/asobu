Asobu Web Services
ContentType changes
Charset: UTF-8


addlyrics.php
header: none
method: POST
query: input_add_lyrics_format, input_add_lyrics_file, input_add_lyrics_select_song (all required)
returns: string
description: add lyric info to the database
note: 

addmediainfo.php
header: none
method: POST
query: add_media_song, add_media_type, add_media_link (all required)
returns: string
description: add media info to the database
note: 

addnewuser.php
header: none
method: POST
query: add_username, add_phone (all required)
returns: string
description: add user info to the database
note:

addscore.php
header: none
method: POST
query: add_user_id, add_song_id, add_score, add_date (all required)
returns: string
description: add score info to the database
note: 

addsong.php
header: none
method: POST
query: input_add_song_name(required), input_add_song_artist, input_add_song_album, input_add_song_album, input_add_song_genre, input_add_song_length, input_add_song_difficulty (required), input_add_song_art
returns: string
description: add song info to the database
note:

common.php
header: none
method: none
query:  none
returns: connection to the database
description: 
note: configure db in here

editlyricsinfo.php
header: none
method: POST
query: edit_lyric_id, edit_lyrics_song, edit_lyrics_format, edit_lyrics_file (all required)
returns: string
description: edit lyric info in the database
note: not done yet

editmediainfo.php
header: none
method: POST
query: edit_media_song, edit_media_type, edit_media_link, edit_media_id (all required)
returns: string
description: edit media info in the database
note: 

editnewuserinfo.php
header: none
method: POST
query: input_edit_user_id, edit_username, input_edit_user_id edit_phone (all required)
returns: string
description: edit user info in the database
note:

editscoreinfo.php
header: none
method: POST
query: edit_user_id, edit_song_id, edit_score, edit_date (all required)
returns: string
description: edit score info in the database
note: not done

editsonginfo.php
header: none
method: POST
query: input_edit_song_id (required), input_edit_song_name (required), input_edit_song_artist, input_edit_song_album, input_edit_song_genre, input_edit_song_length, input_edit_song_difficulty (required), input_edit_song_art
returns: string
description: edit song info in the database
note:

edituserinfo.php
header: none
method: POST
query: input_edit_user_name, input_edit_user_pass, input_edit_user_email (all required)
returns: string
description: 
note: user editnewuserinfo.php instead

getalllyrics.php
header: ContentType: application/json
method: GET
query: none
returns: [{song_id:int, song_name:string, format:string, link_to_file:string}]
description: gets all lyric infomation in the db and returns it as a JSON array string
note: 

getallmedia.php
header: ContentType: application/json
method: GET
query: none
returns: [{media_id:int, song_id:int, song_name:string, type_of_link:string}]
description: gets all media info from db and returns it as a JSON array string
note: 

getallnewusers.php
header: ContentType: application/json
method: GET
query: none
returns: [{user_id:int, username:string, phonenumber:string}]
description: gets all user info from the db and returns it as a JSON array string
note: 

getallscores.php
header: ContentType: application/json
method: GET
query: none
returns: [{song_id:int, score:int, song_name:string, user_id:int, username:string, archived_date:datetime}]
description: gets all score info from db and returns it as a JSON array string
note: 

getallsongs.php
header: ContentType: application/json
method: GET
query: none
returns: [{song_id:int, song_name:string, song_artist:string, song_album:string, song_length:time, song_diff:string, album_artwork:string}]
description: gets all song data from the db and returns it as a JSON array string
note: 

getallusers.php
header: ContentType: application/json
method: GET
query: none
returns: [{user_id:int, username:string, password:string, email:string}]
description: gets all user info from the db and returns it as a JSON array string
note: use getallnewusers.php instead

getlyricinfo.php
header: ContentType: application/json
method: GET
query: lyric_id:int, song_id:int, format:string, limit:int
returns: [{lyric_id:int, song_id:int, song_name:string, format:string, link_to_file:string}]
description: queries db and returns lyric info as JSON array string based on the query data
note: returns an error is limit is used by itself; all optional but you're gonna get an error if one isn't set

getmediainfo.php
header: ContentType: application/json
method: GET
query: media_id:int, song_id_int, type:string, limit:int
returns: [{media_id:int, song_id:int, song_name:string, type_of_link:string}]
description: queries db and returns media info as JSON array string based on the query data
note: returns an error is limit is used by itself; all optional but you're gonna get an error if one isn't set

getnewuserinfo.php
header: ContentType: application/json
method: GET
query: user_id:int, username:string, phone:string, limit:int
returns: [{user_id:int, username:string, phonenumber:string}]
description: queries db and returns user info as JSON array string based on the query data
note: returns an error is limit is used by itself; all optional but you're gonna get an error if one isn't set

getscoreinfo.php
header: ContentType: application/json
method: GET
query: user_id:int, song_id:int, date:datetime(but right now it's a string...will put in TODO), score:int, limit:int, orderby:string, asc:string
returns: [{song_id:int, score:int, song_name:string, user_id:int, username:string, archived_date:datetime}]
description: queries db and returns score info as a JSON array string based on the query data
note: returns an error is limit is used by itself; all optional but you're gonna get an error if one isn't set

getsonginfo.php
header: ContentType: application/json
method: GET
query: song_id:int, name:string, artist:string, album:string, genre:string, length:string, diff:string, artwork:string, orderby:string, desc:string, limit:int
returns: [{song_id:int, song_name:string, song_album:string, song_length:time, song_diff:string, album_artwork:string}]
description: queries db and returns song info as a JSON array string based on the query data
note: returns an error is limit is used by itself; all optional but you're gonna get an error if one isn't set

getuserinfo.php
header: ContentType: application/json
method: GET
query: user_id:int
returns: {username:string, password:string, email:string}
description: queries db and returns user info as a JSON object based on the user_id
note: returns an error is limit is used by itself; use getnewuserinfo.php instead

getsongselection.php
header: ContentType: application/json
method: GET
query: name:string, artist:string, diff:string, orderby:string, asc:string, limit:int
returns: {song_id:int, song_name:sting, song_album:string, song_genre:string, song_length:time, song_diff:string, album_arkwork:string, lyric_id:int, format:string, link_to_file:string, media_id:int, type_of_link:youtube, link:string"}
description: gets the list of songs in the database. It only returns songs that have both lyrics and media links.
note: returns an error is limit is used by itself;

getscoreboard.php
header: ContentType: application/json
method: GET
query: user_id:int (required), song_id:int, name:string, artist:string, diff:string, score:int, orderby:string, asc:string, limit:int
returns: {user_id:int, song_id:int, song_name:string, song_artist:string, score:int, achived_date:datetime}
description: gets the score info for all the songs in the database for a specified user
note: returns an error is limit is used by itself; returns an error if user id isn't set
